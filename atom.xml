<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Michael's Code]]></title>
  <link href="http://whitehead1415.github.io/atom.xml" rel="self"/>
  <link href="http://whitehead1415.github.io/"/>
  <updated>2014-04-26T13:39:53-06:00</updated>
  <id>http://whitehead1415.github.io/</id>
  <author>
    <name><![CDATA[Michael Whitehead]]></name>
    <email><![CDATA[whitehead1415@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Performant Layouts With Javascript]]></title>
    <link href="http://whitehead1415.github.io/blog/2014/04/26/performant-custom-layouts-with-javascript/"/>
    <updated>2014-04-26T12:08:06-06:00</updated>
    <id>http://whitehead1415.github.io/blog/2014/04/26/performant-custom-layouts-with-javascript</id>
    <content type="html"><![CDATA[<h2>HTML5 is great, but&hellip;</h2>

<p>The benefits of using html5 as your primary platform span from cheap development to write once run everywhere.
The main problem that I see is the performance problem.
There are other problems with the javascript language itself but I&rsquo;m saving that for another blog post.
The performance issue however is what forces developers to write native code for custom user interfaces.
I love writing native code for applications, because you can&rsquo;t beat the bare metal performance.
However I hate vender lockin.
I hate how the Android and iOS platforms don&rsquo;t let developers choose their own toolkits.
For that reason I am would like to see HTML5 succeed.</p>

<h2>Along came Famous</h2>

<p>Before <a href="http://www.youtube.com/watch?v=dClmexNib-I">Famous</a> everyone thought that we were held back by the browsers.
Famous came out with the idea of building your own javascript rendering engine that can take advantage of gpu acceleration.
Unfortunately they took really long to release.
Right now they are inviting 500 new developers each day to try out their framework.
I think every web developer should go checkout what they have done on <a href="https://github.com/Famous/famous">github</a></p>

<h2>Famous!!! YOU ARE TAKING TOO LONG!!!</h2>

<p>Months ago we had a project with a user interface that was way too slow.
I was inspired by Famous to use css3 transitions in a javscript layout engine to improve performance.
It works wonderfully. I put the primitive utility on <a href="https://github.com/whitehead1415/float-up">github</a>. The idea of the utility is to replace the broken float styling in browsers.
So you can now float up, instead of floating left and adjusting the width of everything to create a side scrolling app/webpage.</p>

<h2>Demo</h2>

<pre class="codepen" data-height="1000" data-type="result" data-href="fkwnG" data-user="result"><code> </code></pre>


<script async src="http://codepen.io:/assets/embed/ei.js"></script>


<p>The demo can even be sped up if you swap out jquery ui for a faster drag and drop library.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Is a Monad]]></title>
    <link href="http://whitehead1415.github.io/blog/2014/04/25/what-is-a-monad/"/>
    <updated>2014-04-25T22:43:25-06:00</updated>
    <id>http://whitehead1415.github.io/blog/2014/04/25/what-is-a-monad</id>
    <content type="html"><![CDATA[<h2>Words of encouragement</h2>

<p>A monad is very simple.
Yes that is right I said simple.
I think what confuses people the most about monads is that they think it is something more that what it really is.
At least for me it took me a while to understand what a monad was, and when I finally got it I thought &ldquo;really that&rsquo;s all there is to it&rdquo;?
As difficult as it may be for you to understand what a monad is, I would encourage you to stick it out until the end.</p>

<p>As I watch people learn about monads it seams to be the same learning process as for people learning what a pointer is.
For some people it is hard for them to grasp the concept but once they figure it out it opens up a whole new world.
In my mind monads are just as important to high level languages like haskell as pointers are to a low level language like C.
So just keep reading articles and blog posts about monads and you will get it eventualy.</p>

<h2>Lists are monads</h2>

<p>Lets start with a simple example of a monad.
The List data type is simply a container of 0 or more elements.
On a list you can perform functions like fold left, map, and sum. This makes the list a very powerful tool.
Lets say I have a list of integers.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'>  <span class="kr">let</span> <span class="n">numbers</span> <span class="ow">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now lets sum all the integers</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'>  <span class="n">sum</span> <span class="n">numbers</span> <span class="c1">-- Res = 10</span>
</span></code></pre></td></tr></table></div></figure>


<p>Wait what happened there?
Where is the for loop of imperative programming?
Where is the recursion of functional programming?</p>

<p>We had a list of integers but when we call the sum function we just get back a single integer without the list container.
This is the essence of a monad.
<strong>It is a container that has functionality to let You replace whatever is inside of the container while staying <a href="http://blog.higher-order.com/blog/2012/09/13/what-purity-is-and-isnt/">pure</a>.</strong></p>

<p>We could look at examples all day but you won&rsquo;t really know what a monad is until you look under the hood.
You might even need to build one from scratch to fully grasp what it does.</p>

<h1>Monad laws</h1>

<p>In order to be a monad it has to follow 3 laws.</p>

<h3>Law #1 Left Identity</h3>

<p>So imagine we have a box for my container like this [ ].
Now lets put a x inside of it like this [x].
The law of left identity says that for our box to be a monad it has to have a function &ldquo;bind&rdquo; on it.
The &ldquo;bind&rdquo; means you are binding a function to each element inside of the box.
So if you give a function f to the box&rsquo;s bind then your result needs to be f of x</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'>  <span class="n">a</span> <span class="o">&gt;&gt;=</span> <span class="n">f</span> <span class="err">≡</span> <span class="n">f</span> <span class="n">a</span> <span class="c1">-- &gt;&gt;= is bind </span>
</span></code></pre></td></tr></table></div></figure>


<h3>Law #2 Right Identity</h3>

<p>Now we need to understand that the box itself is a function like a constructer.
So if we have [ ] a (or box of a) we get [a].
The constructor takes the arguments passed to it to build the monad, or put elements inside of the container.
The constructor is also known as unit.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'>  <span class="n">m</span> <span class="o">&gt;&gt;=</span> <span class="n">return</span> <span class="err">≡</span>  <span class="n">m</span> <span class="c1">-- &gt;&gt;= is bind    </span>
</span></code></pre></td></tr></table></div></figure>


<h3>Law #3 Associativity</h3>

<p>We all should know the law of associativity. It just means (a + b) + c is the same as saying a + (b + c).
So if you had box of a (or [a]) and two functions f and g then you could say.</p>

<p>([a] binded to f) and then bind that to g ≡ [a] binded to (f of a binded to g)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'>  <span class="n">m</span> <span class="o">&gt;&gt;=</span> <span class="n">f</span> <span class="o">&gt;&gt;=</span> <span class="n">g</span> <span class="err">≡</span> <span class="n">m</span> <span class="o">&gt;&gt;=</span> <span class="p">(</span><span class="nf">\</span><span class="n">x</span> <span class="ow">-&gt;</span> <span class="n">f</span> <span class="n">x</span> <span class="o">&gt;&gt;=</span> <span class="n">g</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>What are monads used for</h2>

<p>Probably the most familiar monad to people are futures and promises.
In javascript futures and promises are used to write asynchronous programs in a sequential flow.
In my previous post I showed how monads can be used to replace dependency injection.
Once you start using monads you can compose them by using monad transformers.
Remember the sum example from above well if you wrote your program in monadic style you could use their power to reduce your code size.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dependency Injection With The Reader Monad]]></title>
    <link href="http://whitehead1415.github.io/blog/2014/01/19/dependency-injection-with-the-reader-monad/"/>
    <updated>2014-01-19T20:46:34-07:00</updated>
    <id>http://whitehead1415.github.io/blog/2014/01/19/dependency-injection-with-the-reader-monad</id>
    <content type="html"><![CDATA[<h2>Why not just use a Dependency Injection Framework?</h2>

<p>Usually I like to use SubCut for my scala projects. SubCut is easy to use, but I recently started a Spray project and for some reason the SubCut was not injecting the mock dependencies into the actors. This made me go looking for alternatives. I have investigated guice and the cake pattern but I really wanted something extremely simple. I found <a href="http://www.youtube.com/watch?v=ZasXwtTRkio">Dead Simple Dependency Injection by Runar</a>. Thanks to him I found the simple solution that I was looking for.</p>

<p>There are many different posible ways to configure the reader monad. Another great resource is the scalaz library <a href="http://blog.originate.com/blog/2013/10/21/reader-monad-for-dependency-injection/">here is a link</a> for an example of how to use it. This post is only how I personally like to set it up.</p>

<h2>The Reader Monad</h2>

<p>I don&rsquo;t believe that you really need to understand what a monad is in order to use one. If you use scala&rsquo;s Option or Either then you already know how to use a monad. I can appreciate the desire to gain a deep understanding of what a monad is and how it works, but the purpose of this post is only to show how to use a reader monad for dependency injection.</p>

<p>A monad is just a wrapper that holds a value. It has two functions one where it changes the value inside the wrapper from one type to another type. The other function flattens the wrappers in the case where you have a wrapper[wrapper[wrapper[value]]] it will flatten it to a wrapper[value] in scala these functions are called map and flatmap respectively.</p>

<p>The Reader Monad:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Reader</span><span class="o">[</span><span class="kt">C</span>, <span class="kt">A</span><span class="o">](</span><span class="n">g</span><span class="k">:</span> <span class="kt">C</span> <span class="o">=&gt;</span> <span class="n">A</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">apply</span><span class="o">(</span><span class="n">c</span><span class="k">:</span> <span class="kt">C</span><span class="o">)</span> <span class="k">=</span> <span class="n">g</span><span class="o">(</span><span class="n">c</span><span class="o">)</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">map</span><span class="o">[</span><span class="kt">B</span><span class="o">](</span><span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="n">B</span><span class="o">)</span><span class="k">:</span> <span class="kt">Reader</span><span class="o">[</span><span class="kt">C</span>, <span class="kt">B</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Reader</span><span class="o">((</span><span class="n">c</span><span class="k">:</span> <span class="kt">C</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">f</span><span class="o">(</span><span class="n">g</span><span class="o">(</span><span class="n">c</span><span class="o">)))</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">flatMap</span><span class="o">[</span><span class="kt">B</span><span class="o">](</span><span class="n">f</span> <span class="n">A</span> <span class="k">=&gt;</span> <span class="nc">Reader</span><span class="o">[</span><span class="kt">C</span>, <span class="kt">B</span><span class="o">])</span><span class="k">:</span> <span class="kt">Reader</span><span class="o">[</span><span class="kt">C</span>, <span class="kt">B</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Reader</span><span class="o">((</span><span class="n">c</span><span class="k">:</span> <span class="kt">C</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">f</span><span class="o">(</span><span class="n">g</span><span class="o">(</span><span class="n">c</span><span class="o">))(</span><span class="n">c</span><span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We will need a way to configure multiple dependencies. Again there are many possible variations to do this but here is the way that I like to do it. Create a trait that has unimplemented functions for all the dependencies that you need. Also you need to create a run function that will pass the dependencies into the reader monad.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">Config</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">connection</span><span class="k">:</span> <span class="kt">Connection</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">emailService</span><span class="k">:</span> <span class="kt">EmailService</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">run</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">f</span><span class="k">:</span> <span class="kt">Reader</span><span class="o">[</span><span class="kt">Config</span>, <span class="kt">A</span><span class="o">])</span> <span class="k">=</span> <span class="n">f</span><span class="o">(</span><span class="k">this</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Some basic services:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">Connection</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">queryDB</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">id</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MockConnection</span> <span class="k">extends</span> <span class="nc">Connection</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">sendEmail</span><span class="o">(</span><span class="n">user</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="s">&quot;Mock User&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">EmailService</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">sendEmail</span><span class="o">(</span><span class="n">user</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">println</span><span class="o">(</span><span class="s">&quot;Sending email to User: &quot;</span> <span class="o">+</span> <span class="n">user</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MockEmailService</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">sendEmail</span><span class="o">(</span><span class="n">user</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">println</span><span class="o">(</span><span class="s">&quot;Mock Email Service&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So now we need to setup our functions so that we can inject our dependencies.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">getUser</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Reader</span><span class="o">((</span><span class="n">c</span><span class="k">:</span> <span class="kt">Config</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">queryDB</span><span class="o">(</span><span class="n">id</span><span class="o">)</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">sendEmail</span><span class="o">(</span><span class="n">user</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Reader</span><span class="o">((</span><span class="n">c</span><span class="k">:</span> <span class="kt">Config</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">emailService</span><span class="o">.</span><span class="n">sendEmail</span><span class="o">(</span><span class="n">user</span><span class="o">)</span>
</span><span class='line'><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see all we are doing is currying. There are many ways that we could pass our dependencies into these functions for example we could do something like the following.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">//normal connection</span>
</span><span class='line'><span class="k">val</span> <span class="n">user</span> <span class="k">=</span> <span class="n">getUser</span><span class="o">(</span><span class="s">&quot;foobar&quot;</span><span class="o">)(</span><span class="k">new</span> <span class="nc">Connection</span><span class="o">)</span>
</span><span class='line'><span class="c1">//mock Connection</span>
</span><span class='line'><span class="k">val</span> <span class="n">user</span> <span class="k">=</span> <span class="n">getUser</span><span class="o">(</span><span class="s">&quot;foobar&quot;</span><span class="o">)(</span><span class="k">new</span> <span class="nc">MockConnection</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>So in conclusion this is a very flexible way to manage your dependencies. Here is the full code</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="o">#!/</span><span class="n">bin</span><span class="o">/</span><span class="n">sh</span>
</span><span class='line'><span class="n">exec</span> <span class="n">scala</span> <span class="s">&quot;$0&quot;</span> <span class="s">&quot;$@&quot;</span>
</span><span class='line'><span class="o">!</span><span class="k">#</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">DIExample</span> <span class="k">extends</span> <span class="nc">Config</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">connection</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Connection</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">emailService</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">EmailService</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">main</span><span class="o">(</span><span class="n">args</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">user1</span> <span class="k">=</span> <span class="n">run</span><span class="o">(</span><span class="n">getUser</span><span class="o">(</span><span class="s">&quot;foobar&quot;</span><span class="o">))</span>
</span><span class='line'>      <span class="n">run</span><span class="o">(</span><span class="n">sendEmail</span><span class="o">(</span><span class="s">&quot;foobar&quot;</span><span class="o">))</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">user2</span> <span class="k">=</span> <span class="n">run</span><span class="o">(</span><span class="n">getUserAndSendEmail</span><span class="o">(</span><span class="s">&quot;foobar&quot;</span><span class="o">))</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">getUserAndSendEmail</span><span class="o">(</span><span class="n">userName</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Reader</span><span class="o">[</span><span class="kt">Config</span>, <span class="kt">String</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">user</span> <span class="k">&lt;-</span> <span class="n">getUser</span><span class="o">(</span><span class="n">userName</span><span class="o">)</span>
</span><span class='line'>          <span class="n">foo</span> <span class="k">&lt;-</span> <span class="n">sendEmail</span><span class="o">(</span><span class="n">user</span><span class="o">)</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">yield</span> <span class="n">user</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">getUser</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Reader</span><span class="o">((</span><span class="n">c</span><span class="k">:</span> <span class="kt">Config</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="n">c</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">queryDB</span><span class="o">(</span><span class="n">id</span><span class="o">)</span>
</span><span class='line'>  <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">sendEmail</span><span class="o">(</span><span class="n">user</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Reader</span><span class="o">((</span><span class="n">c</span><span class="k">:</span> <span class="kt">Config</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="n">c</span><span class="o">.</span><span class="n">emailService</span><span class="o">.</span><span class="n">sendEmail</span><span class="o">(</span><span class="n">user</span><span class="o">)</span>
</span><span class='line'>  <span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// SERVICES</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Connection</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">queryDB</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">id</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MockConnection</span> <span class="k">extends</span> <span class="nc">Connection</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">queryDB</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="s">&quot;Mock User&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">EmailService</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">sendEmail</span><span class="o">(</span><span class="n">user</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">println</span><span class="o">(</span><span class="s">&quot;Sending email to User: &quot;</span> <span class="o">+</span> <span class="n">user</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// READER MONAD + CONFIG</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Reader</span><span class="o">[</span><span class="kt">C</span>, <span class="kt">A</span><span class="o">](</span><span class="n">g</span><span class="k">:</span> <span class="kt">C</span> <span class="o">=&gt;</span> <span class="n">A</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">apply</span><span class="o">(</span><span class="n">c</span><span class="k">:</span> <span class="kt">C</span><span class="o">)</span> <span class="k">=</span> <span class="n">g</span><span class="o">(</span><span class="n">c</span><span class="o">)</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">map</span><span class="o">[</span><span class="kt">B</span><span class="o">](</span><span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="n">B</span><span class="o">)</span><span class="k">:</span> <span class="kt">Reader</span><span class="o">[</span><span class="kt">C</span>, <span class="kt">B</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Reader</span><span class="o">((</span><span class="n">c</span><span class="k">:</span> <span class="kt">C</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">f</span><span class="o">(</span><span class="n">g</span><span class="o">(</span><span class="n">c</span><span class="o">)))</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">flatMap</span><span class="o">[</span><span class="kt">B</span><span class="o">](</span><span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="nc">Reader</span><span class="o">[</span><span class="kt">C</span>, <span class="kt">B</span><span class="o">])</span><span class="k">:</span> <span class="kt">Reader</span><span class="o">[</span><span class="kt">C</span>, <span class="kt">B</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Reader</span><span class="o">((</span><span class="n">c</span><span class="k">:</span> <span class="kt">C</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">f</span><span class="o">(</span><span class="n">g</span><span class="o">(</span><span class="n">c</span><span class="o">))(</span><span class="n">c</span><span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">trait</span> <span class="nc">Config</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">connection</span><span class="k">:</span> <span class="kt">Connection</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">emailService</span><span class="k">:</span> <span class="kt">EmailService</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">run</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">f</span><span class="k">:</span> <span class="kt">Reader</span><span class="o">[</span><span class="kt">Config</span>, <span class="kt">A</span><span class="o">])</span> <span class="k">=</span> <span class="n">f</span><span class="o">(</span><span class="k">this</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">DIExample</span><span class="o">.</span><span class="n">main</span><span class="o">(</span><span class="n">args</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
